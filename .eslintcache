[{"/mnt/c/Users/William's Zenbook/Documents/SideProjects/waste-wizard/src/index.tsx":"1","/mnt/c/Users/William's Zenbook/Documents/SideProjects/waste-wizard/src/App.tsx":"2","/mnt/c/Users/William's Zenbook/Documents/SideProjects/waste-wizard/src/components/HeaderIcon.tsx":"3","/mnt/c/Users/William's Zenbook/Documents/SideProjects/waste-wizard/src/components/WasteItemCard.tsx":"4","/mnt/c/Users/William's Zenbook/Documents/SideProjects/waste-wizard/src/components/WasteRoom.tsx":"5"},{"size":261,"mtime":1611422069426,"results":"6","hashOfConfig":"7"},{"size":5534,"mtime":1611536155646,"results":"8","hashOfConfig":"7"},{"size":395,"mtime":1611439068566,"results":"9","hashOfConfig":"7"},{"size":2717,"mtime":1611533308682,"results":"10","hashOfConfig":"7"},{"size":2293,"mtime":1611536076335,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"5gbkca",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/William's Zenbook/Documents/SideProjects/waste-wizard/src/index.tsx",[],["24","25"],"/mnt/c/Users/William's Zenbook/Documents/SideProjects/waste-wizard/src/App.tsx",["26"],"import React, { ChangeEvent, SyntheticEvent, useState } from 'react';\nimport { QueryClient, QueryClientProvider, useQuery } from 'react-query';\nimport { Card, Container, Dimmer, Input, Loader, Menu } from 'semantic-ui-react';\nimport HeaderIcon from './components/HeaderIcon';\nimport WasteItemCard from './components/WasteItemCard';\nimport WasteRoom from './components/WasteRoom';\n\nenum Menus {\n  SEARCH = \"Search items\",\n  ROOM = \"Waste Room\"\n}\n\nenum BinTypes {\n  GARBAGE = \"Garbage\",\n  OVERSIZE = \"Oversize\",\n  METAL_ITEMS = \"Metal Items\",\n  ELECTRONIC = \"Electronic Waste\",\n  BLUE_BIN = \"Blue Bin\",\n  YARD_WASTE = \"Yard Waste\",\n  DEPOT = \"Depot\",\n  CHRISTMAS = \"Christmas Tree\",\n  HAZARD = \"HHW\",\n  NOT_ACCEPTED = \"Not Accepted\"\n}\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n\n  const extractStringFromHTML = (str: string) => {\n    const span = document.createElement(\"span\");\n    span.innerHTML = str;\n    return span.innerText;\n  }\n\n  const consolidateBinTypes = (binType: string) => {\n    if (binType === BinTypes.GARBAGE || binType === BinTypes.OVERSIZE || binType === BinTypes.METAL_ITEMS || binType === BinTypes.ELECTRONIC) {\n      return BinTypes.GARBAGE;\n    } else if (binType === BinTypes.YARD_WASTE || binType === BinTypes.DEPOT || binType === BinTypes.CHRISTMAS) {\n      return BinTypes.YARD_WASTE;\n    } else if (binType === BinTypes.BLUE_BIN) {\n      return BinTypes.BLUE_BIN;\n    } else {\n      return BinTypes.HAZARD;\n    }\n  }\n\n  const [activeMenu, setActiveMenu] = useState(Menus.SEARCH);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedWasteItem, setSelectedWasteItem] = useState<SelectedWasteItem | null>(null);\n\n  const handleSearchMenuClick = (e: SyntheticEvent<HTMLElement>) => {\n    setActiveMenu(Menus.SEARCH);\n  }\n\n  const handleROOMMenuClick = (e: SyntheticEvent<HTMLElement>) => {\n    setActiveMenu(Menus.ROOM);\n\n  }\n\n  const onSearchChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.target.value);\n  }\n\n  const handleButtonClick = (e: SyntheticEvent<HTMLElement>, { ...data }) => {\n    const itemName: string = data.itemName;\n    const binType: BinTypes = consolidateBinTypes(data.binType);\n    const newSelectedWasteItem: SelectedWasteItem = {\n      itemName: itemName,\n      binType: binType.toString()\n    };\n    setSelectedWasteItem(newSelectedWasteItem);\n  }\n\n  const keywordMatchesSearchTerm = (keyword: string) => {\n    if (keyword.indexOf(searchTerm) !== -1) {\n      return true;\n    }\n    return false;\n  }\n\n  const fetchWasteItems = async () => {\n    const res = await fetch(\"https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000\");\n    return res.json();\n  }\n\n  const WasteItemsGrid = () => {\n    const { data, status } = useQuery(\"WasteItemsGrid\", fetchWasteItems);\n    console.log(data);\n\n    const wasteItemList: WasteItem[] = [];\n\n    return (\n      <div>\n        {status === \"error\" &&\n          <div>Error loading data.</div>}\n\n        {status === \"loading\" &&\n          <div>\n            <Dimmer active inverted>\n              <Loader inverted content=\"Loading..\" />\n            </Dimmer>\n          </div>}\n\n        {status === \"success\" &&\n          <div>\n            {data.map((wasteItemRaw: WasteItemRaw) => {\n              const description: string = extractStringFromHTML(extractStringFromHTML(wasteItemRaw.body));\n              const binType: string = wasteItemRaw.category;\n              const names = wasteItemRaw.keywords.split(\",\");\n\n              names.forEach((wasteItemName: string) => {\n                const wasteItem: WasteItem = {\n                  itemName: wasteItemName,\n                  binType: binType,\n                  description: description,\n                  handleOnClick: handleButtonClick.bind(null)\n                };\n                wasteItemList.push(wasteItem);\n              });\n            })}\n            <Container>\n              <Card.Group itemsPerRow={5}>\n                {wasteItemList.map((wasteItem: WasteItem) => (\n                  keywordMatchesSearchTerm(wasteItem.itemName) ? <WasteItemCard key={wasteItem.itemName} wasteItem={wasteItem} /> : null\n                ))}\n              </Card.Group>\n            </Container>\n          </div>}\n      </div>\n    )\n  }\n\n  const MenuPages: React.FC = () => {\n    if (activeMenu === Menus.SEARCH) {\n      return (\n        <div>\n          <div className=\"searchBar\">\n            <Input\n              className=\"searchInput\"\n              placeholder=\"Search for for household item\"\n              value={searchTerm}\n              onChange={onSearchChange}\n            />\n          </div>\n          <div>\n            <WasteItemsGrid />\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"wasteRoom\">\n        <WasteRoom selectedWasteItem={selectedWasteItem} />\n      </div>\n    );\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <div className=\"container\">\n        <div className=\"header\">\n          <HeaderIcon />\n        </div>\n        <div>\n          <Menu secondary className=\"menu\">\n            <Menu.Item\n              name={Menus.SEARCH}\n              active={activeMenu === Menus.SEARCH}\n              onClick={handleSearchMenuClick}\n            />\n            <Menu.Item\n              name={Menus.ROOM}\n              active={activeMenu === Menus.ROOM}\n              onClick={handleROOMMenuClick}\n            />\n          </Menu>\n        </div>\n        <div>\n          <MenuPages />\n        </div>\n      </div>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","/mnt/c/Users/William's Zenbook/Documents/SideProjects/waste-wizard/src/components/HeaderIcon.tsx",[],"/mnt/c/Users/William's Zenbook/Documents/SideProjects/waste-wizard/src/components/WasteItemCard.tsx",[],"/mnt/c/Users/William's Zenbook/Documents/SideProjects/waste-wizard/src/components/WasteRoom.tsx",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":107,"column":52,"nodeType":"33","messageId":"34","endLine":107,"endColumn":54},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]